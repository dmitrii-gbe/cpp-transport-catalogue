// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "graph.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5frouter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5frouter_2eproto;
namespace proto {
class OptionalRouteInternalData;
struct OptionalRouteInternalDataDefaultTypeInternal;
extern OptionalRouteInternalDataDefaultTypeInternal _OptionalRouteInternalData_default_instance_;
class RouteInternalData;
struct RouteInternalDataDefaultTypeInternal;
extern RouteInternalDataDefaultTypeInternal _RouteInternalData_default_instance_;
class Router;
struct RouterDefaultTypeInternal;
extern RouterDefaultTypeInternal _Router_default_instance_;
class Router_EdgeToBusEntry_DoNotUse;
struct Router_EdgeToBusEntry_DoNotUseDefaultTypeInternal;
extern Router_EdgeToBusEntry_DoNotUseDefaultTypeInternal _Router_EdgeToBusEntry_DoNotUse_default_instance_;
class Router_StopToVertexidEntry_DoNotUse;
struct Router_StopToVertexidEntry_DoNotUseDefaultTypeInternal;
extern Router_StopToVertexidEntry_DoNotUseDefaultTypeInternal _Router_StopToVertexidEntry_DoNotUse_default_instance_;
class Router_VertexidToStopEntry_DoNotUse;
struct Router_VertexidToStopEntry_DoNotUseDefaultTypeInternal;
extern Router_VertexidToStopEntry_DoNotUseDefaultTypeInternal _Router_VertexidToStopEntry_DoNotUse_default_instance_;
class RoutesInternalData;
struct RoutesInternalDataDefaultTypeInternal;
extern RoutesInternalDataDefaultTypeInternal _RoutesInternalData_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::OptionalRouteInternalData* Arena::CreateMaybeMessage<::proto::OptionalRouteInternalData>(Arena*);
template<> ::proto::RouteInternalData* Arena::CreateMaybeMessage<::proto::RouteInternalData>(Arena*);
template<> ::proto::Router* Arena::CreateMaybeMessage<::proto::Router>(Arena*);
template<> ::proto::Router_EdgeToBusEntry_DoNotUse* Arena::CreateMaybeMessage<::proto::Router_EdgeToBusEntry_DoNotUse>(Arena*);
template<> ::proto::Router_StopToVertexidEntry_DoNotUse* Arena::CreateMaybeMessage<::proto::Router_StopToVertexidEntry_DoNotUse>(Arena*);
template<> ::proto::Router_VertexidToStopEntry_DoNotUse* Arena::CreateMaybeMessage<::proto::Router_VertexidToStopEntry_DoNotUse>(Arena*);
template<> ::proto::RoutesInternalData* Arena::CreateMaybeMessage<::proto::RoutesInternalData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class Router_StopToVertexidEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Router_StopToVertexidEntry_DoNotUse, 
    std::string, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Router_StopToVertexidEntry_DoNotUse, 
    std::string, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> SuperType;
  Router_StopToVertexidEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Router_StopToVertexidEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Router_StopToVertexidEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Router_StopToVertexidEntry_DoNotUse& other);
  static const Router_StopToVertexidEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Router_StopToVertexidEntry_DoNotUse*>(&_Router_StopToVertexidEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto.Router.StopToVertexidEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};

// -------------------------------------------------------------------

class Router_VertexidToStopEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Router_VertexidToStopEntry_DoNotUse, 
    uint64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Router_VertexidToStopEntry_DoNotUse, 
    uint64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Router_VertexidToStopEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Router_VertexidToStopEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Router_VertexidToStopEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Router_VertexidToStopEntry_DoNotUse& other);
  static const Router_VertexidToStopEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Router_VertexidToStopEntry_DoNotUse*>(&_Router_VertexidToStopEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto.Router.VertexidToStopEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};

// -------------------------------------------------------------------

class Router_EdgeToBusEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Router_EdgeToBusEntry_DoNotUse, 
    uint64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Router_EdgeToBusEntry_DoNotUse, 
    uint64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Router_EdgeToBusEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Router_EdgeToBusEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Router_EdgeToBusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Router_EdgeToBusEntry_DoNotUse& other);
  static const Router_EdgeToBusEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Router_EdgeToBusEntry_DoNotUse*>(&_Router_EdgeToBusEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto.Router.EdgeToBusEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};

// -------------------------------------------------------------------

class Router final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Router) */ {
 public:
  inline Router() : Router(nullptr) {}
  ~Router() override;
  explicit PROTOBUF_CONSTEXPR Router(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Router(const Router& from);
  Router(Router&& from) noexcept
    : Router() {
    *this = ::std::move(from);
  }

  inline Router& operator=(const Router& from) {
    CopyFrom(from);
    return *this;
  }
  inline Router& operator=(Router&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Router& default_instance() {
    return *internal_default_instance();
  }
  static inline const Router* internal_default_instance() {
    return reinterpret_cast<const Router*>(
               &_Router_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Router& a, Router& b) {
    a.Swap(&b);
  }
  inline void Swap(Router* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Router* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Router* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Router>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Router& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Router& from) {
    Router::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Router* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Router";
  }
  protected:
  explicit Router(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kStopToVertexidFieldNumber = 1,
    kVertexidToStopFieldNumber = 2,
    kEdgeToBusFieldNumber = 3,
    kGraphFieldNumber = 4,
  };
  // map<string, uint64> stop_to_vertexid = 1;
  int stop_to_vertexid_size() const;
  private:
  int _internal_stop_to_vertexid_size() const;
  public:
  void clear_stop_to_vertexid();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
      _internal_stop_to_vertexid() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
      _internal_mutable_stop_to_vertexid();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
      stop_to_vertexid() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
      mutable_stop_to_vertexid();

  // map<uint64, string> vertexid_to_stop = 2;
  int vertexid_to_stop_size() const;
  private:
  int _internal_vertexid_to_stop_size() const;
  public:
  void clear_vertexid_to_stop();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
      _internal_vertexid_to_stop() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
      _internal_mutable_vertexid_to_stop();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
      vertexid_to_stop() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
      mutable_vertexid_to_stop();

  // map<uint64, string> edge_to_bus = 3;
  int edge_to_bus_size() const;
  private:
  int _internal_edge_to_bus_size() const;
  public:
  void clear_edge_to_bus();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
      _internal_edge_to_bus() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
      _internal_mutable_edge_to_bus();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
      edge_to_bus() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
      mutable_edge_to_bus();

  // .proto.Graph graph = 4;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::proto::Graph& graph() const;
  PROTOBUF_NODISCARD ::proto::Graph* release_graph();
  ::proto::Graph* mutable_graph();
  void set_allocated_graph(::proto::Graph* graph);
  private:
  const ::proto::Graph& _internal_graph() const;
  ::proto::Graph* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::proto::Graph* graph);
  ::proto::Graph* unsafe_arena_release_graph();

  // @@protoc_insertion_point(class_scope:proto.Router)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Router_StopToVertexidEntry_DoNotUse,
        std::string, uint64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> stop_to_vertexid_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Router_VertexidToStopEntry_DoNotUse,
        uint64_t, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> vertexid_to_stop_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Router_EdgeToBusEntry_DoNotUse,
        uint64_t, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> edge_to_bus_;
    ::proto::Graph* graph_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class RouteInternalData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.RouteInternalData) */ {
 public:
  inline RouteInternalData() : RouteInternalData(nullptr) {}
  ~RouteInternalData() override;
  explicit PROTOBUF_CONSTEXPR RouteInternalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteInternalData(const RouteInternalData& from);
  RouteInternalData(RouteInternalData&& from) noexcept
    : RouteInternalData() {
    *this = ::std::move(from);
  }

  inline RouteInternalData& operator=(const RouteInternalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteInternalData& operator=(RouteInternalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteInternalData& default_instance() {
    return *internal_default_instance();
  }
  enum PrevEdgeCase {
    kPrevEdge = 2,
    PREV_EDGE__NOT_SET = 0,
  };

  static inline const RouteInternalData* internal_default_instance() {
    return reinterpret_cast<const RouteInternalData*>(
               &_RouteInternalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RouteInternalData& a, RouteInternalData& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteInternalData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteInternalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteInternalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteInternalData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteInternalData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteInternalData& from) {
    RouteInternalData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteInternalData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.RouteInternalData";
  }
  protected:
  explicit RouteInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 1,
    kPrevEdgeFieldNumber = 2,
  };
  // double weight = 1;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // uint64 prev_edge = 2;
  bool has_prev_edge() const;
  private:
  bool _internal_has_prev_edge() const;
  public:
  void clear_prev_edge();
  uint64_t prev_edge() const;
  void set_prev_edge(uint64_t value);
  private:
  uint64_t _internal_prev_edge() const;
  void _internal_set_prev_edge(uint64_t value);
  public:

  void clear_prev_edge_();
  PrevEdgeCase prev_edge__case() const;
  // @@protoc_insertion_point(class_scope:proto.RouteInternalData)
 private:
  class _Internal;
  void set_has_prev_edge();

  inline bool has_prev_edge_() const;
  inline void clear_has_prev_edge_();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double weight_;
    union PrevEdgeUnion {
      constexpr PrevEdgeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint64_t prev_edge_;
    } prev_edge__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class OptionalRouteInternalData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.OptionalRouteInternalData) */ {
 public:
  inline OptionalRouteInternalData() : OptionalRouteInternalData(nullptr) {}
  ~OptionalRouteInternalData() override;
  explicit PROTOBUF_CONSTEXPR OptionalRouteInternalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptionalRouteInternalData(const OptionalRouteInternalData& from);
  OptionalRouteInternalData(OptionalRouteInternalData&& from) noexcept
    : OptionalRouteInternalData() {
    *this = ::std::move(from);
  }

  inline OptionalRouteInternalData& operator=(const OptionalRouteInternalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionalRouteInternalData& operator=(OptionalRouteInternalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionalRouteInternalData& default_instance() {
    return *internal_default_instance();
  }
  enum OptionalRouteInternalDataCase {
    kOptionalRouteInternalData = 1,
    OPTIONAL_ROUTE_INTERNAL_DATA__NOT_SET = 0,
  };

  static inline const OptionalRouteInternalData* internal_default_instance() {
    return reinterpret_cast<const OptionalRouteInternalData*>(
               &_OptionalRouteInternalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OptionalRouteInternalData& a, OptionalRouteInternalData& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionalRouteInternalData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionalRouteInternalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionalRouteInternalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionalRouteInternalData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptionalRouteInternalData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OptionalRouteInternalData& from) {
    OptionalRouteInternalData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionalRouteInternalData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.OptionalRouteInternalData";
  }
  protected:
  explicit OptionalRouteInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionalRouteInternalDataFieldNumber = 1,
  };
  // .proto.RouteInternalData optional_route_internal_data = 1;
  bool has_optional_route_internal_data() const;
  private:
  bool _internal_has_optional_route_internal_data() const;
  public:
  void clear_optional_route_internal_data();
  const ::proto::RouteInternalData& optional_route_internal_data() const;
  PROTOBUF_NODISCARD ::proto::RouteInternalData* release_optional_route_internal_data();
  ::proto::RouteInternalData* mutable_optional_route_internal_data();
  void set_allocated_optional_route_internal_data(::proto::RouteInternalData* optional_route_internal_data);
  private:
  const ::proto::RouteInternalData& _internal_optional_route_internal_data() const;
  ::proto::RouteInternalData* _internal_mutable_optional_route_internal_data();
  public:
  void unsafe_arena_set_allocated_optional_route_internal_data(
      ::proto::RouteInternalData* optional_route_internal_data);
  ::proto::RouteInternalData* unsafe_arena_release_optional_route_internal_data();

  void clear_optional_route_internal_data_();
  OptionalRouteInternalDataCase optional_route_internal_data__case() const;
  // @@protoc_insertion_point(class_scope:proto.OptionalRouteInternalData)
 private:
  class _Internal;
  void set_has_optional_route_internal_data();

  inline bool has_optional_route_internal_data_() const;
  inline void clear_has_optional_route_internal_data_();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union OptionalRouteInternalDataUnion {
      constexpr OptionalRouteInternalDataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::RouteInternalData* optional_route_internal_data_;
    } optional_route_internal_data__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class RoutesInternalData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.RoutesInternalData) */ {
 public:
  inline RoutesInternalData() : RoutesInternalData(nullptr) {}
  ~RoutesInternalData() override;
  explicit PROTOBUF_CONSTEXPR RoutesInternalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutesInternalData(const RoutesInternalData& from);
  RoutesInternalData(RoutesInternalData&& from) noexcept
    : RoutesInternalData() {
    *this = ::std::move(from);
  }

  inline RoutesInternalData& operator=(const RoutesInternalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutesInternalData& operator=(RoutesInternalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutesInternalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutesInternalData* internal_default_instance() {
    return reinterpret_cast<const RoutesInternalData*>(
               &_RoutesInternalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RoutesInternalData& a, RoutesInternalData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutesInternalData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutesInternalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutesInternalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutesInternalData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutesInternalData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoutesInternalData& from) {
    RoutesInternalData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutesInternalData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.RoutesInternalData";
  }
  protected:
  explicit RoutesInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesInternalDataFirstFieldNumber = 1,
  };
  // repeated .proto.OptionalRouteInternalData routes_internal_data_first = 1;
  int routes_internal_data_first_size() const;
  private:
  int _internal_routes_internal_data_first_size() const;
  public:
  void clear_routes_internal_data_first();
  ::proto::OptionalRouteInternalData* mutable_routes_internal_data_first(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::OptionalRouteInternalData >*
      mutable_routes_internal_data_first();
  private:
  const ::proto::OptionalRouteInternalData& _internal_routes_internal_data_first(int index) const;
  ::proto::OptionalRouteInternalData* _internal_add_routes_internal_data_first();
  public:
  const ::proto::OptionalRouteInternalData& routes_internal_data_first(int index) const;
  ::proto::OptionalRouteInternalData* add_routes_internal_data_first();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::OptionalRouteInternalData >&
      routes_internal_data_first() const;

  // @@protoc_insertion_point(class_scope:proto.RoutesInternalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::OptionalRouteInternalData > routes_internal_data_first_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Router

// map<string, uint64> stop_to_vertexid = 1;
inline int Router::_internal_stop_to_vertexid_size() const {
  return _impl_.stop_to_vertexid_.size();
}
inline int Router::stop_to_vertexid_size() const {
  return _internal_stop_to_vertexid_size();
}
inline void Router::clear_stop_to_vertexid() {
  _impl_.stop_to_vertexid_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
Router::_internal_stop_to_vertexid() const {
  return _impl_.stop_to_vertexid_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
Router::stop_to_vertexid() const {
  // @@protoc_insertion_point(field_map:proto.Router.stop_to_vertexid)
  return _internal_stop_to_vertexid();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
Router::_internal_mutable_stop_to_vertexid() {
  return _impl_.stop_to_vertexid_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
Router::mutable_stop_to_vertexid() {
  // @@protoc_insertion_point(field_mutable_map:proto.Router.stop_to_vertexid)
  return _internal_mutable_stop_to_vertexid();
}

// map<uint64, string> vertexid_to_stop = 2;
inline int Router::_internal_vertexid_to_stop_size() const {
  return _impl_.vertexid_to_stop_.size();
}
inline int Router::vertexid_to_stop_size() const {
  return _internal_vertexid_to_stop_size();
}
inline void Router::clear_vertexid_to_stop() {
  _impl_.vertexid_to_stop_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
Router::_internal_vertexid_to_stop() const {
  return _impl_.vertexid_to_stop_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
Router::vertexid_to_stop() const {
  // @@protoc_insertion_point(field_map:proto.Router.vertexid_to_stop)
  return _internal_vertexid_to_stop();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
Router::_internal_mutable_vertexid_to_stop() {
  return _impl_.vertexid_to_stop_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
Router::mutable_vertexid_to_stop() {
  // @@protoc_insertion_point(field_mutable_map:proto.Router.vertexid_to_stop)
  return _internal_mutable_vertexid_to_stop();
}

// map<uint64, string> edge_to_bus = 3;
inline int Router::_internal_edge_to_bus_size() const {
  return _impl_.edge_to_bus_.size();
}
inline int Router::edge_to_bus_size() const {
  return _internal_edge_to_bus_size();
}
inline void Router::clear_edge_to_bus() {
  _impl_.edge_to_bus_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
Router::_internal_edge_to_bus() const {
  return _impl_.edge_to_bus_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
Router::edge_to_bus() const {
  // @@protoc_insertion_point(field_map:proto.Router.edge_to_bus)
  return _internal_edge_to_bus();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
Router::_internal_mutable_edge_to_bus() {
  return _impl_.edge_to_bus_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
Router::mutable_edge_to_bus() {
  // @@protoc_insertion_point(field_mutable_map:proto.Router.edge_to_bus)
  return _internal_mutable_edge_to_bus();
}

// .proto.Graph graph = 4;
inline bool Router::_internal_has_graph() const {
  return this != internal_default_instance() && _impl_.graph_ != nullptr;
}
inline bool Router::has_graph() const {
  return _internal_has_graph();
}
inline const ::proto::Graph& Router::_internal_graph() const {
  const ::proto::Graph* p = _impl_.graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Graph&>(
      ::proto::_Graph_default_instance_);
}
inline const ::proto::Graph& Router::graph() const {
  // @@protoc_insertion_point(field_get:proto.Router.graph)
  return _internal_graph();
}
inline void Router::unsafe_arena_set_allocated_graph(
    ::proto::Graph* graph) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_);
  }
  _impl_.graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Router.graph)
}
inline ::proto::Graph* Router::release_graph() {
  
  ::proto::Graph* temp = _impl_.graph_;
  _impl_.graph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Graph* Router::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:proto.Router.graph)
  
  ::proto::Graph* temp = _impl_.graph_;
  _impl_.graph_ = nullptr;
  return temp;
}
inline ::proto::Graph* Router::_internal_mutable_graph() {
  
  if (_impl_.graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Graph>(GetArenaForAllocation());
    _impl_.graph_ = p;
  }
  return _impl_.graph_;
}
inline ::proto::Graph* Router::mutable_graph() {
  ::proto::Graph* _msg = _internal_mutable_graph();
  // @@protoc_insertion_point(field_mutable:proto.Router.graph)
  return _msg;
}
inline void Router::set_allocated_graph(::proto::Graph* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_);
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph));
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:proto.Router.graph)
}

// -------------------------------------------------------------------

// RouteInternalData

// double weight = 1;
inline void RouteInternalData::clear_weight() {
  _impl_.weight_ = 0;
}
inline double RouteInternalData::_internal_weight() const {
  return _impl_.weight_;
}
inline double RouteInternalData::weight() const {
  // @@protoc_insertion_point(field_get:proto.RouteInternalData.weight)
  return _internal_weight();
}
inline void RouteInternalData::_internal_set_weight(double value) {
  
  _impl_.weight_ = value;
}
inline void RouteInternalData::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:proto.RouteInternalData.weight)
}

// uint64 prev_edge = 2;
inline bool RouteInternalData::_internal_has_prev_edge() const {
  return prev_edge__case() == kPrevEdge;
}
inline bool RouteInternalData::has_prev_edge() const {
  return _internal_has_prev_edge();
}
inline void RouteInternalData::set_has_prev_edge() {
  _impl_._oneof_case_[0] = kPrevEdge;
}
inline void RouteInternalData::clear_prev_edge() {
  if (_internal_has_prev_edge()) {
    _impl_.prev_edge__.prev_edge_ = uint64_t{0u};
    clear_has_prev_edge_();
  }
}
inline uint64_t RouteInternalData::_internal_prev_edge() const {
  if (_internal_has_prev_edge()) {
    return _impl_.prev_edge__.prev_edge_;
  }
  return uint64_t{0u};
}
inline void RouteInternalData::_internal_set_prev_edge(uint64_t value) {
  if (!_internal_has_prev_edge()) {
    clear_prev_edge_();
    set_has_prev_edge();
  }
  _impl_.prev_edge__.prev_edge_ = value;
}
inline uint64_t RouteInternalData::prev_edge() const {
  // @@protoc_insertion_point(field_get:proto.RouteInternalData.prev_edge)
  return _internal_prev_edge();
}
inline void RouteInternalData::set_prev_edge(uint64_t value) {
  _internal_set_prev_edge(value);
  // @@protoc_insertion_point(field_set:proto.RouteInternalData.prev_edge)
}

inline bool RouteInternalData::has_prev_edge_() const {
  return prev_edge__case() != PREV_EDGE__NOT_SET;
}
inline void RouteInternalData::clear_has_prev_edge_() {
  _impl_._oneof_case_[0] = PREV_EDGE__NOT_SET;
}
inline RouteInternalData::PrevEdgeCase RouteInternalData::prev_edge__case() const {
  return RouteInternalData::PrevEdgeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// OptionalRouteInternalData

// .proto.RouteInternalData optional_route_internal_data = 1;
inline bool OptionalRouteInternalData::_internal_has_optional_route_internal_data() const {
  return optional_route_internal_data__case() == kOptionalRouteInternalData;
}
inline bool OptionalRouteInternalData::has_optional_route_internal_data() const {
  return _internal_has_optional_route_internal_data();
}
inline void OptionalRouteInternalData::set_has_optional_route_internal_data() {
  _impl_._oneof_case_[0] = kOptionalRouteInternalData;
}
inline void OptionalRouteInternalData::clear_optional_route_internal_data() {
  if (_internal_has_optional_route_internal_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.optional_route_internal_data__.optional_route_internal_data_;
    }
    clear_has_optional_route_internal_data_();
  }
}
inline ::proto::RouteInternalData* OptionalRouteInternalData::release_optional_route_internal_data() {
  // @@protoc_insertion_point(field_release:proto.OptionalRouteInternalData.optional_route_internal_data)
  if (_internal_has_optional_route_internal_data()) {
    clear_has_optional_route_internal_data_();
    ::proto::RouteInternalData* temp = _impl_.optional_route_internal_data__.optional_route_internal_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.optional_route_internal_data__.optional_route_internal_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::RouteInternalData& OptionalRouteInternalData::_internal_optional_route_internal_data() const {
  return _internal_has_optional_route_internal_data()
      ? *_impl_.optional_route_internal_data__.optional_route_internal_data_
      : reinterpret_cast< ::proto::RouteInternalData&>(::proto::_RouteInternalData_default_instance_);
}
inline const ::proto::RouteInternalData& OptionalRouteInternalData::optional_route_internal_data() const {
  // @@protoc_insertion_point(field_get:proto.OptionalRouteInternalData.optional_route_internal_data)
  return _internal_optional_route_internal_data();
}
inline ::proto::RouteInternalData* OptionalRouteInternalData::unsafe_arena_release_optional_route_internal_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.OptionalRouteInternalData.optional_route_internal_data)
  if (_internal_has_optional_route_internal_data()) {
    clear_has_optional_route_internal_data_();
    ::proto::RouteInternalData* temp = _impl_.optional_route_internal_data__.optional_route_internal_data_;
    _impl_.optional_route_internal_data__.optional_route_internal_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OptionalRouteInternalData::unsafe_arena_set_allocated_optional_route_internal_data(::proto::RouteInternalData* optional_route_internal_data) {
  clear_optional_route_internal_data_();
  if (optional_route_internal_data) {
    set_has_optional_route_internal_data();
    _impl_.optional_route_internal_data__.optional_route_internal_data_ = optional_route_internal_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.OptionalRouteInternalData.optional_route_internal_data)
}
inline ::proto::RouteInternalData* OptionalRouteInternalData::_internal_mutable_optional_route_internal_data() {
  if (!_internal_has_optional_route_internal_data()) {
    clear_optional_route_internal_data_();
    set_has_optional_route_internal_data();
    _impl_.optional_route_internal_data__.optional_route_internal_data_ = CreateMaybeMessage< ::proto::RouteInternalData >(GetArenaForAllocation());
  }
  return _impl_.optional_route_internal_data__.optional_route_internal_data_;
}
inline ::proto::RouteInternalData* OptionalRouteInternalData::mutable_optional_route_internal_data() {
  ::proto::RouteInternalData* _msg = _internal_mutable_optional_route_internal_data();
  // @@protoc_insertion_point(field_mutable:proto.OptionalRouteInternalData.optional_route_internal_data)
  return _msg;
}

inline bool OptionalRouteInternalData::has_optional_route_internal_data_() const {
  return optional_route_internal_data__case() != OPTIONAL_ROUTE_INTERNAL_DATA__NOT_SET;
}
inline void OptionalRouteInternalData::clear_has_optional_route_internal_data_() {
  _impl_._oneof_case_[0] = OPTIONAL_ROUTE_INTERNAL_DATA__NOT_SET;
}
inline OptionalRouteInternalData::OptionalRouteInternalDataCase OptionalRouteInternalData::optional_route_internal_data__case() const {
  return OptionalRouteInternalData::OptionalRouteInternalDataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RoutesInternalData

// repeated .proto.OptionalRouteInternalData routes_internal_data_first = 1;
inline int RoutesInternalData::_internal_routes_internal_data_first_size() const {
  return _impl_.routes_internal_data_first_.size();
}
inline int RoutesInternalData::routes_internal_data_first_size() const {
  return _internal_routes_internal_data_first_size();
}
inline void RoutesInternalData::clear_routes_internal_data_first() {
  _impl_.routes_internal_data_first_.Clear();
}
inline ::proto::OptionalRouteInternalData* RoutesInternalData::mutable_routes_internal_data_first(int index) {
  // @@protoc_insertion_point(field_mutable:proto.RoutesInternalData.routes_internal_data_first)
  return _impl_.routes_internal_data_first_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::OptionalRouteInternalData >*
RoutesInternalData::mutable_routes_internal_data_first() {
  // @@protoc_insertion_point(field_mutable_list:proto.RoutesInternalData.routes_internal_data_first)
  return &_impl_.routes_internal_data_first_;
}
inline const ::proto::OptionalRouteInternalData& RoutesInternalData::_internal_routes_internal_data_first(int index) const {
  return _impl_.routes_internal_data_first_.Get(index);
}
inline const ::proto::OptionalRouteInternalData& RoutesInternalData::routes_internal_data_first(int index) const {
  // @@protoc_insertion_point(field_get:proto.RoutesInternalData.routes_internal_data_first)
  return _internal_routes_internal_data_first(index);
}
inline ::proto::OptionalRouteInternalData* RoutesInternalData::_internal_add_routes_internal_data_first() {
  return _impl_.routes_internal_data_first_.Add();
}
inline ::proto::OptionalRouteInternalData* RoutesInternalData::add_routes_internal_data_first() {
  ::proto::OptionalRouteInternalData* _add = _internal_add_routes_internal_data_first();
  // @@protoc_insertion_point(field_add:proto.RoutesInternalData.routes_internal_data_first)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::OptionalRouteInternalData >&
RoutesInternalData::routes_internal_data_first() const {
  // @@protoc_insertion_point(field_list:proto.RoutesInternalData.routes_internal_data_first)
  return _impl_.routes_internal_data_first_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
