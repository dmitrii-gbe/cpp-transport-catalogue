// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "map_renderer.pb.h"
#include "transport_router.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace proto {
class Bus;
struct BusDefaultTypeInternal;
extern BusDefaultTypeInternal _Bus_default_instance_;
class BusesAndStops;
struct BusesAndStopsDefaultTypeInternal;
extern BusesAndStopsDefaultTypeInternal _BusesAndStops_default_instance_;
class Dist;
struct DistDefaultTypeInternal;
extern DistDefaultTypeInternal _Dist_default_instance_;
class RouterData;
struct RouterDataDefaultTypeInternal;
extern RouterDataDefaultTypeInternal _RouterData_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class TransportCatalogue;
struct TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::Bus* Arena::CreateMaybeMessage<::proto::Bus>(Arena*);
template<> ::proto::BusesAndStops* Arena::CreateMaybeMessage<::proto::BusesAndStops>(Arena*);
template<> ::proto::Dist* Arena::CreateMaybeMessage<::proto::Dist>(Arena*);
template<> ::proto::RouterData* Arena::CreateMaybeMessage<::proto::RouterData>(Arena*);
template<> ::proto::Stop* Arena::CreateMaybeMessage<::proto::Stop>(Arena*);
template<> ::proto::TransportCatalogue* Arena::CreateMaybeMessage<::proto::TransportCatalogue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class Bus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Bus) */ {
 public:
  inline Bus() : Bus(nullptr) {}
  ~Bus() override;
  explicit PROTOBUF_CONSTEXPR Bus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bus(const Bus& from);
  Bus(Bus&& from) noexcept
    : Bus() {
    *this = ::std::move(from);
  }

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bus& operator=(Bus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bus& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bus* internal_default_instance() {
    return reinterpret_cast<const Bus*>(
               &_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Bus& a, Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(Bus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bus& from) {
    Bus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Bus";
  }
  protected:
  explicit Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 3,
    kNameFieldNumber = 2,
    kIsRoundtripFieldNumber = 1,
  };
  // repeated .proto.Stop stops = 3;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::proto::Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >*
      mutable_stops();
  private:
  const ::proto::Stop& _internal_stops(int index) const;
  ::proto::Stop* _internal_add_stops();
  public:
  const ::proto::Stop& stops(int index) const;
  ::proto::Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >&
      stops() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool is_roundtrip = 1;
  void clear_is_roundtrip();
  bool is_roundtrip() const;
  void set_is_roundtrip(bool value);
  private:
  bool _internal_is_roundtrip() const;
  void _internal_set_is_roundtrip(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Bus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop > stops_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool is_roundtrip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Stop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  ~Stop() override;
  explicit PROTOBUF_CONSTEXPR Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stop& from) {
    Stop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double latitude = 1;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    double latitude_;
    double longitude_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Dist final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Dist) */ {
 public:
  inline Dist() : Dist(nullptr) {}
  ~Dist() override;
  explicit PROTOBUF_CONSTEXPR Dist(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dist(const Dist& from);
  Dist(Dist&& from) noexcept
    : Dist() {
    *this = ::std::move(from);
  }

  inline Dist& operator=(const Dist& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dist& operator=(Dist&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dist& default_instance() {
    return *internal_default_instance();
  }
  static inline const Dist* internal_default_instance() {
    return reinterpret_cast<const Dist*>(
               &_Dist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Dist& a, Dist& b) {
    a.Swap(&b);
  }
  inline void Swap(Dist* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Dist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Dist>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Dist& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Dist& from) {
    Dist::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dist* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Dist";
  }
  protected:
  explicit Dist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepartureFieldNumber = 1,
    kDestinationFieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // string departure = 1;
  void clear_departure();
  const std::string& departure() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_departure(ArgT0&& arg0, ArgT... args);
  std::string* mutable_departure();
  PROTOBUF_NODISCARD std::string* release_departure();
  void set_allocated_departure(std::string* departure);
  private:
  const std::string& _internal_departure() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_departure(const std::string& value);
  std::string* _internal_mutable_departure();
  public:

  // string destination = 2;
  void clear_destination();
  const std::string& destination() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination();
  PROTOBUF_NODISCARD std::string* release_destination();
  void set_allocated_destination(std::string* destination);
  private:
  const std::string& _internal_destination() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination(const std::string& value);
  std::string* _internal_mutable_destination();
  public:

  // double distance = 3;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Dist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr departure_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_;
    double distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class BusesAndStops final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.BusesAndStops) */ {
 public:
  inline BusesAndStops() : BusesAndStops(nullptr) {}
  ~BusesAndStops() override;
  explicit PROTOBUF_CONSTEXPR BusesAndStops(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BusesAndStops(const BusesAndStops& from);
  BusesAndStops(BusesAndStops&& from) noexcept
    : BusesAndStops() {
    *this = ::std::move(from);
  }

  inline BusesAndStops& operator=(const BusesAndStops& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusesAndStops& operator=(BusesAndStops&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BusesAndStops& default_instance() {
    return *internal_default_instance();
  }
  static inline const BusesAndStops* internal_default_instance() {
    return reinterpret_cast<const BusesAndStops*>(
               &_BusesAndStops_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BusesAndStops& a, BusesAndStops& b) {
    a.Swap(&b);
  }
  inline void Swap(BusesAndStops* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusesAndStops* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BusesAndStops* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BusesAndStops>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BusesAndStops& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BusesAndStops& from) {
    BusesAndStops::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusesAndStops* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.BusesAndStops";
  }
  protected:
  explicit BusesAndStops(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusesFieldNumber = 1,
    kStopsFieldNumber = 2,
    kDistansesFieldNumber = 3,
  };
  // repeated .proto.Bus buses_ = 1;
  int buses__size() const;
  private:
  int _internal_buses__size() const;
  public:
  void clear_buses_();
  ::proto::Bus* mutable_buses_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Bus >*
      mutable_buses_();
  private:
  const ::proto::Bus& _internal_buses_(int index) const;
  ::proto::Bus* _internal_add_buses_();
  public:
  const ::proto::Bus& buses_(int index) const;
  ::proto::Bus* add_buses_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Bus >&
      buses_() const;

  // repeated .proto.Stop stops_ = 2;
  int stops__size() const;
  private:
  int _internal_stops__size() const;
  public:
  void clear_stops_();
  ::proto::Stop* mutable_stops_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >*
      mutable_stops_();
  private:
  const ::proto::Stop& _internal_stops_(int index) const;
  ::proto::Stop* _internal_add_stops_();
  public:
  const ::proto::Stop& stops_(int index) const;
  ::proto::Stop* add_stops_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >&
      stops_() const;

  // repeated .proto.Dist distanses = 3;
  int distanses_size() const;
  private:
  int _internal_distanses_size() const;
  public:
  void clear_distanses();
  ::proto::Dist* mutable_distanses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Dist >*
      mutable_distanses();
  private:
  const ::proto::Dist& _internal_distanses(int index) const;
  ::proto::Dist* _internal_add_distanses();
  public:
  const ::proto::Dist& distanses(int index) const;
  ::proto::Dist* add_distanses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Dist >&
      distanses() const;

  // @@protoc_insertion_point(class_scope:proto.BusesAndStops)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Bus > buses__;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop > stops__;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Dist > distanses_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class RouterData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.RouterData) */ {
 public:
  inline RouterData() : RouterData(nullptr) {}
  ~RouterData() override;
  explicit PROTOBUF_CONSTEXPR RouterData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouterData(const RouterData& from);
  RouterData(RouterData&& from) noexcept
    : RouterData() {
    *this = ::std::move(from);
  }

  inline RouterData& operator=(const RouterData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouterData& operator=(RouterData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouterData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouterData* internal_default_instance() {
    return reinterpret_cast<const RouterData*>(
               &_RouterData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RouterData& a, RouterData& b) {
    a.Swap(&b);
  }
  inline void Swap(RouterData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouterData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouterData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouterData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouterData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouterData& from) {
    RouterData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouterData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.RouterData";
  }
  protected:
  explicit RouterData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesInternalDataFieldNumber = 2,
    kRouterFieldNumber = 1,
    kBusVelocityFieldNumber = 3,
    kBusWaitTimeFieldNumber = 4,
  };
  // repeated .proto.RoutesInternalData routes_internal_data = 2;
  int routes_internal_data_size() const;
  private:
  int _internal_routes_internal_data_size() const;
  public:
  void clear_routes_internal_data();
  ::proto::RoutesInternalData* mutable_routes_internal_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::RoutesInternalData >*
      mutable_routes_internal_data();
  private:
  const ::proto::RoutesInternalData& _internal_routes_internal_data(int index) const;
  ::proto::RoutesInternalData* _internal_add_routes_internal_data();
  public:
  const ::proto::RoutesInternalData& routes_internal_data(int index) const;
  ::proto::RoutesInternalData* add_routes_internal_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::RoutesInternalData >&
      routes_internal_data() const;

  // .proto.Router router = 1;
  bool has_router() const;
  private:
  bool _internal_has_router() const;
  public:
  void clear_router();
  const ::proto::Router& router() const;
  PROTOBUF_NODISCARD ::proto::Router* release_router();
  ::proto::Router* mutable_router();
  void set_allocated_router(::proto::Router* router);
  private:
  const ::proto::Router& _internal_router() const;
  ::proto::Router* _internal_mutable_router();
  public:
  void unsafe_arena_set_allocated_router(
      ::proto::Router* router);
  ::proto::Router* unsafe_arena_release_router();

  // double bus_velocity = 3;
  void clear_bus_velocity();
  double bus_velocity() const;
  void set_bus_velocity(double value);
  private:
  double _internal_bus_velocity() const;
  void _internal_set_bus_velocity(double value);
  public:

  // double bus_wait_time = 4;
  void clear_bus_wait_time();
  double bus_wait_time() const;
  void set_bus_wait_time(double value);
  private:
  double _internal_bus_wait_time() const;
  void _internal_set_bus_wait_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.RouterData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::RoutesInternalData > routes_internal_data_;
    ::proto::Router* router_;
    double bus_velocity_;
    double bus_wait_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalogue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {}
  ~TransportCatalogue() override;
  explicit PROTOBUF_CONSTEXPR TransportCatalogue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportCatalogue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportCatalogue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportCatalogue& from) {
    TransportCatalogue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusesAndStopsFieldNumber = 1,
    kRenderSettingsFieldNumber = 2,
    kRouterDataFieldNumber = 3,
  };
  // .proto.BusesAndStops buses_and_stops = 1;
  bool has_buses_and_stops() const;
  private:
  bool _internal_has_buses_and_stops() const;
  public:
  void clear_buses_and_stops();
  const ::proto::BusesAndStops& buses_and_stops() const;
  PROTOBUF_NODISCARD ::proto::BusesAndStops* release_buses_and_stops();
  ::proto::BusesAndStops* mutable_buses_and_stops();
  void set_allocated_buses_and_stops(::proto::BusesAndStops* buses_and_stops);
  private:
  const ::proto::BusesAndStops& _internal_buses_and_stops() const;
  ::proto::BusesAndStops* _internal_mutable_buses_and_stops();
  public:
  void unsafe_arena_set_allocated_buses_and_stops(
      ::proto::BusesAndStops* buses_and_stops);
  ::proto::BusesAndStops* unsafe_arena_release_buses_and_stops();

  // .proto.RenderSettings render_settings = 2;
  bool has_render_settings() const;
  private:
  bool _internal_has_render_settings() const;
  public:
  void clear_render_settings();
  const ::proto::RenderSettings& render_settings() const;
  PROTOBUF_NODISCARD ::proto::RenderSettings* release_render_settings();
  ::proto::RenderSettings* mutable_render_settings();
  void set_allocated_render_settings(::proto::RenderSettings* render_settings);
  private:
  const ::proto::RenderSettings& _internal_render_settings() const;
  ::proto::RenderSettings* _internal_mutable_render_settings();
  public:
  void unsafe_arena_set_allocated_render_settings(
      ::proto::RenderSettings* render_settings);
  ::proto::RenderSettings* unsafe_arena_release_render_settings();

  // .proto.RouterData router_data = 3;
  bool has_router_data() const;
  private:
  bool _internal_has_router_data() const;
  public:
  void clear_router_data();
  const ::proto::RouterData& router_data() const;
  PROTOBUF_NODISCARD ::proto::RouterData* release_router_data();
  ::proto::RouterData* mutable_router_data();
  void set_allocated_router_data(::proto::RouterData* router_data);
  private:
  const ::proto::RouterData& _internal_router_data() const;
  ::proto::RouterData* _internal_mutable_router_data();
  public:
  void unsafe_arena_set_allocated_router_data(
      ::proto::RouterData* router_data);
  ::proto::RouterData* unsafe_arena_release_router_data();

  // @@protoc_insertion_point(class_scope:proto.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::BusesAndStops* buses_and_stops_;
    ::proto::RenderSettings* render_settings_;
    ::proto::RouterData* router_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Bus

// bool is_roundtrip = 1;
inline void Bus::clear_is_roundtrip() {
  _impl_.is_roundtrip_ = false;
}
inline bool Bus::_internal_is_roundtrip() const {
  return _impl_.is_roundtrip_;
}
inline bool Bus::is_roundtrip() const {
  // @@protoc_insertion_point(field_get:proto.Bus.is_roundtrip)
  return _internal_is_roundtrip();
}
inline void Bus::_internal_set_is_roundtrip(bool value) {
  
  _impl_.is_roundtrip_ = value;
}
inline void Bus::set_is_roundtrip(bool value) {
  _internal_set_is_roundtrip(value);
  // @@protoc_insertion_point(field_set:proto.Bus.is_roundtrip)
}

// string name = 2;
inline void Bus::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Bus::name() const {
  // @@protoc_insertion_point(field_get:proto.Bus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bus::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Bus.name)
}
inline std::string* Bus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.Bus.name)
  return _s;
}
inline const std::string& Bus::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Bus::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Bus::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Bus::release_name() {
  // @@protoc_insertion_point(field_release:proto.Bus.name)
  return _impl_.name_.Release();
}
inline void Bus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Bus.name)
}

// repeated .proto.Stop stops = 3;
inline int Bus::_internal_stops_size() const {
  return _impl_.stops_.size();
}
inline int Bus::stops_size() const {
  return _internal_stops_size();
}
inline void Bus::clear_stops() {
  _impl_.stops_.Clear();
}
inline ::proto::Stop* Bus::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:proto.Bus.stops)
  return _impl_.stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >*
Bus::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:proto.Bus.stops)
  return &_impl_.stops_;
}
inline const ::proto::Stop& Bus::_internal_stops(int index) const {
  return _impl_.stops_.Get(index);
}
inline const ::proto::Stop& Bus::stops(int index) const {
  // @@protoc_insertion_point(field_get:proto.Bus.stops)
  return _internal_stops(index);
}
inline ::proto::Stop* Bus::_internal_add_stops() {
  return _impl_.stops_.Add();
}
inline ::proto::Stop* Bus::add_stops() {
  ::proto::Stop* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:proto.Bus.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >&
Bus::stops() const {
  // @@protoc_insertion_point(field_list:proto.Bus.stops)
  return _impl_.stops_;
}

// -------------------------------------------------------------------

// Stop

// double latitude = 1;
inline void Stop::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline double Stop::_internal_latitude() const {
  return _impl_.latitude_;
}
inline double Stop::latitude() const {
  // @@protoc_insertion_point(field_get:proto.Stop.latitude)
  return _internal_latitude();
}
inline void Stop::_internal_set_latitude(double value) {
  
  _impl_.latitude_ = value;
}
inline void Stop::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:proto.Stop.latitude)
}

// double longitude = 2;
inline void Stop::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline double Stop::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double Stop::longitude() const {
  // @@protoc_insertion_point(field_get:proto.Stop.longitude)
  return _internal_longitude();
}
inline void Stop::_internal_set_longitude(double value) {
  
  _impl_.longitude_ = value;
}
inline void Stop::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:proto.Stop.longitude)
}

// string name = 3;
inline void Stop::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Stop::name() const {
  // @@protoc_insertion_point(field_get:proto.Stop.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stop::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Stop.name)
}
inline std::string* Stop::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.Stop.name)
  return _s;
}
inline const std::string& Stop::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Stop::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Stop::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Stop::release_name() {
  // @@protoc_insertion_point(field_release:proto.Stop.name)
  return _impl_.name_.Release();
}
inline void Stop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Stop.name)
}

// -------------------------------------------------------------------

// Dist

// string departure = 1;
inline void Dist::clear_departure() {
  _impl_.departure_.ClearToEmpty();
}
inline const std::string& Dist::departure() const {
  // @@protoc_insertion_point(field_get:proto.Dist.departure)
  return _internal_departure();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Dist::set_departure(ArgT0&& arg0, ArgT... args) {
 
 _impl_.departure_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Dist.departure)
}
inline std::string* Dist::mutable_departure() {
  std::string* _s = _internal_mutable_departure();
  // @@protoc_insertion_point(field_mutable:proto.Dist.departure)
  return _s;
}
inline const std::string& Dist::_internal_departure() const {
  return _impl_.departure_.Get();
}
inline void Dist::_internal_set_departure(const std::string& value) {
  
  _impl_.departure_.Set(value, GetArenaForAllocation());
}
inline std::string* Dist::_internal_mutable_departure() {
  
  return _impl_.departure_.Mutable(GetArenaForAllocation());
}
inline std::string* Dist::release_departure() {
  // @@protoc_insertion_point(field_release:proto.Dist.departure)
  return _impl_.departure_.Release();
}
inline void Dist::set_allocated_departure(std::string* departure) {
  if (departure != nullptr) {
    
  } else {
    
  }
  _impl_.departure_.SetAllocated(departure, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.departure_.IsDefault()) {
    _impl_.departure_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Dist.departure)
}

// string destination = 2;
inline void Dist::clear_destination() {
  _impl_.destination_.ClearToEmpty();
}
inline const std::string& Dist::destination() const {
  // @@protoc_insertion_point(field_get:proto.Dist.destination)
  return _internal_destination();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Dist::set_destination(ArgT0&& arg0, ArgT... args) {
 
 _impl_.destination_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Dist.destination)
}
inline std::string* Dist::mutable_destination() {
  std::string* _s = _internal_mutable_destination();
  // @@protoc_insertion_point(field_mutable:proto.Dist.destination)
  return _s;
}
inline const std::string& Dist::_internal_destination() const {
  return _impl_.destination_.Get();
}
inline void Dist::_internal_set_destination(const std::string& value) {
  
  _impl_.destination_.Set(value, GetArenaForAllocation());
}
inline std::string* Dist::_internal_mutable_destination() {
  
  return _impl_.destination_.Mutable(GetArenaForAllocation());
}
inline std::string* Dist::release_destination() {
  // @@protoc_insertion_point(field_release:proto.Dist.destination)
  return _impl_.destination_.Release();
}
inline void Dist::set_allocated_destination(std::string* destination) {
  if (destination != nullptr) {
    
  } else {
    
  }
  _impl_.destination_.SetAllocated(destination, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.destination_.IsDefault()) {
    _impl_.destination_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Dist.destination)
}

// double distance = 3;
inline void Dist::clear_distance() {
  _impl_.distance_ = 0;
}
inline double Dist::_internal_distance() const {
  return _impl_.distance_;
}
inline double Dist::distance() const {
  // @@protoc_insertion_point(field_get:proto.Dist.distance)
  return _internal_distance();
}
inline void Dist::_internal_set_distance(double value) {
  
  _impl_.distance_ = value;
}
inline void Dist::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:proto.Dist.distance)
}

// -------------------------------------------------------------------

// BusesAndStops

// repeated .proto.Bus buses_ = 1;
inline int BusesAndStops::_internal_buses__size() const {
  return _impl_.buses__.size();
}
inline int BusesAndStops::buses__size() const {
  return _internal_buses__size();
}
inline void BusesAndStops::clear_buses_() {
  _impl_.buses__.Clear();
}
inline ::proto::Bus* BusesAndStops::mutable_buses_(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BusesAndStops.buses_)
  return _impl_.buses__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Bus >*
BusesAndStops::mutable_buses_() {
  // @@protoc_insertion_point(field_mutable_list:proto.BusesAndStops.buses_)
  return &_impl_.buses__;
}
inline const ::proto::Bus& BusesAndStops::_internal_buses_(int index) const {
  return _impl_.buses__.Get(index);
}
inline const ::proto::Bus& BusesAndStops::buses_(int index) const {
  // @@protoc_insertion_point(field_get:proto.BusesAndStops.buses_)
  return _internal_buses_(index);
}
inline ::proto::Bus* BusesAndStops::_internal_add_buses_() {
  return _impl_.buses__.Add();
}
inline ::proto::Bus* BusesAndStops::add_buses_() {
  ::proto::Bus* _add = _internal_add_buses_();
  // @@protoc_insertion_point(field_add:proto.BusesAndStops.buses_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Bus >&
BusesAndStops::buses_() const {
  // @@protoc_insertion_point(field_list:proto.BusesAndStops.buses_)
  return _impl_.buses__;
}

// repeated .proto.Stop stops_ = 2;
inline int BusesAndStops::_internal_stops__size() const {
  return _impl_.stops__.size();
}
inline int BusesAndStops::stops__size() const {
  return _internal_stops__size();
}
inline void BusesAndStops::clear_stops_() {
  _impl_.stops__.Clear();
}
inline ::proto::Stop* BusesAndStops::mutable_stops_(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BusesAndStops.stops_)
  return _impl_.stops__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >*
BusesAndStops::mutable_stops_() {
  // @@protoc_insertion_point(field_mutable_list:proto.BusesAndStops.stops_)
  return &_impl_.stops__;
}
inline const ::proto::Stop& BusesAndStops::_internal_stops_(int index) const {
  return _impl_.stops__.Get(index);
}
inline const ::proto::Stop& BusesAndStops::stops_(int index) const {
  // @@protoc_insertion_point(field_get:proto.BusesAndStops.stops_)
  return _internal_stops_(index);
}
inline ::proto::Stop* BusesAndStops::_internal_add_stops_() {
  return _impl_.stops__.Add();
}
inline ::proto::Stop* BusesAndStops::add_stops_() {
  ::proto::Stop* _add = _internal_add_stops_();
  // @@protoc_insertion_point(field_add:proto.BusesAndStops.stops_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >&
BusesAndStops::stops_() const {
  // @@protoc_insertion_point(field_list:proto.BusesAndStops.stops_)
  return _impl_.stops__;
}

// repeated .proto.Dist distanses = 3;
inline int BusesAndStops::_internal_distanses_size() const {
  return _impl_.distanses_.size();
}
inline int BusesAndStops::distanses_size() const {
  return _internal_distanses_size();
}
inline void BusesAndStops::clear_distanses() {
  _impl_.distanses_.Clear();
}
inline ::proto::Dist* BusesAndStops::mutable_distanses(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BusesAndStops.distanses)
  return _impl_.distanses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Dist >*
BusesAndStops::mutable_distanses() {
  // @@protoc_insertion_point(field_mutable_list:proto.BusesAndStops.distanses)
  return &_impl_.distanses_;
}
inline const ::proto::Dist& BusesAndStops::_internal_distanses(int index) const {
  return _impl_.distanses_.Get(index);
}
inline const ::proto::Dist& BusesAndStops::distanses(int index) const {
  // @@protoc_insertion_point(field_get:proto.BusesAndStops.distanses)
  return _internal_distanses(index);
}
inline ::proto::Dist* BusesAndStops::_internal_add_distanses() {
  return _impl_.distanses_.Add();
}
inline ::proto::Dist* BusesAndStops::add_distanses() {
  ::proto::Dist* _add = _internal_add_distanses();
  // @@protoc_insertion_point(field_add:proto.BusesAndStops.distanses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Dist >&
BusesAndStops::distanses() const {
  // @@protoc_insertion_point(field_list:proto.BusesAndStops.distanses)
  return _impl_.distanses_;
}

// -------------------------------------------------------------------

// RouterData

// .proto.Router router = 1;
inline bool RouterData::_internal_has_router() const {
  return this != internal_default_instance() && _impl_.router_ != nullptr;
}
inline bool RouterData::has_router() const {
  return _internal_has_router();
}
inline const ::proto::Router& RouterData::_internal_router() const {
  const ::proto::Router* p = _impl_.router_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Router&>(
      ::proto::_Router_default_instance_);
}
inline const ::proto::Router& RouterData::router() const {
  // @@protoc_insertion_point(field_get:proto.RouterData.router)
  return _internal_router();
}
inline void RouterData::unsafe_arena_set_allocated_router(
    ::proto::Router* router) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.router_);
  }
  _impl_.router_ = router;
  if (router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.RouterData.router)
}
inline ::proto::Router* RouterData::release_router() {
  
  ::proto::Router* temp = _impl_.router_;
  _impl_.router_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Router* RouterData::unsafe_arena_release_router() {
  // @@protoc_insertion_point(field_release:proto.RouterData.router)
  
  ::proto::Router* temp = _impl_.router_;
  _impl_.router_ = nullptr;
  return temp;
}
inline ::proto::Router* RouterData::_internal_mutable_router() {
  
  if (_impl_.router_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Router>(GetArenaForAllocation());
    _impl_.router_ = p;
  }
  return _impl_.router_;
}
inline ::proto::Router* RouterData::mutable_router() {
  ::proto::Router* _msg = _internal_mutable_router();
  // @@protoc_insertion_point(field_mutable:proto.RouterData.router)
  return _msg;
}
inline void RouterData::set_allocated_router(::proto::Router* router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.router_);
  }
  if (router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router));
    if (message_arena != submessage_arena) {
      router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.router_ = router;
  // @@protoc_insertion_point(field_set_allocated:proto.RouterData.router)
}

// repeated .proto.RoutesInternalData routes_internal_data = 2;
inline int RouterData::_internal_routes_internal_data_size() const {
  return _impl_.routes_internal_data_.size();
}
inline int RouterData::routes_internal_data_size() const {
  return _internal_routes_internal_data_size();
}
inline ::proto::RoutesInternalData* RouterData::mutable_routes_internal_data(int index) {
  // @@protoc_insertion_point(field_mutable:proto.RouterData.routes_internal_data)
  return _impl_.routes_internal_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::RoutesInternalData >*
RouterData::mutable_routes_internal_data() {
  // @@protoc_insertion_point(field_mutable_list:proto.RouterData.routes_internal_data)
  return &_impl_.routes_internal_data_;
}
inline const ::proto::RoutesInternalData& RouterData::_internal_routes_internal_data(int index) const {
  return _impl_.routes_internal_data_.Get(index);
}
inline const ::proto::RoutesInternalData& RouterData::routes_internal_data(int index) const {
  // @@protoc_insertion_point(field_get:proto.RouterData.routes_internal_data)
  return _internal_routes_internal_data(index);
}
inline ::proto::RoutesInternalData* RouterData::_internal_add_routes_internal_data() {
  return _impl_.routes_internal_data_.Add();
}
inline ::proto::RoutesInternalData* RouterData::add_routes_internal_data() {
  ::proto::RoutesInternalData* _add = _internal_add_routes_internal_data();
  // @@protoc_insertion_point(field_add:proto.RouterData.routes_internal_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::RoutesInternalData >&
RouterData::routes_internal_data() const {
  // @@protoc_insertion_point(field_list:proto.RouterData.routes_internal_data)
  return _impl_.routes_internal_data_;
}

// double bus_velocity = 3;
inline void RouterData::clear_bus_velocity() {
  _impl_.bus_velocity_ = 0;
}
inline double RouterData::_internal_bus_velocity() const {
  return _impl_.bus_velocity_;
}
inline double RouterData::bus_velocity() const {
  // @@protoc_insertion_point(field_get:proto.RouterData.bus_velocity)
  return _internal_bus_velocity();
}
inline void RouterData::_internal_set_bus_velocity(double value) {
  
  _impl_.bus_velocity_ = value;
}
inline void RouterData::set_bus_velocity(double value) {
  _internal_set_bus_velocity(value);
  // @@protoc_insertion_point(field_set:proto.RouterData.bus_velocity)
}

// double bus_wait_time = 4;
inline void RouterData::clear_bus_wait_time() {
  _impl_.bus_wait_time_ = 0;
}
inline double RouterData::_internal_bus_wait_time() const {
  return _impl_.bus_wait_time_;
}
inline double RouterData::bus_wait_time() const {
  // @@protoc_insertion_point(field_get:proto.RouterData.bus_wait_time)
  return _internal_bus_wait_time();
}
inline void RouterData::_internal_set_bus_wait_time(double value) {
  
  _impl_.bus_wait_time_ = value;
}
inline void RouterData::set_bus_wait_time(double value) {
  _internal_set_bus_wait_time(value);
  // @@protoc_insertion_point(field_set:proto.RouterData.bus_wait_time)
}

// -------------------------------------------------------------------

// TransportCatalogue

// .proto.BusesAndStops buses_and_stops = 1;
inline bool TransportCatalogue::_internal_has_buses_and_stops() const {
  return this != internal_default_instance() && _impl_.buses_and_stops_ != nullptr;
}
inline bool TransportCatalogue::has_buses_and_stops() const {
  return _internal_has_buses_and_stops();
}
inline void TransportCatalogue::clear_buses_and_stops() {
  if (GetArenaForAllocation() == nullptr && _impl_.buses_and_stops_ != nullptr) {
    delete _impl_.buses_and_stops_;
  }
  _impl_.buses_and_stops_ = nullptr;
}
inline const ::proto::BusesAndStops& TransportCatalogue::_internal_buses_and_stops() const {
  const ::proto::BusesAndStops* p = _impl_.buses_and_stops_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::BusesAndStops&>(
      ::proto::_BusesAndStops_default_instance_);
}
inline const ::proto::BusesAndStops& TransportCatalogue::buses_and_stops() const {
  // @@protoc_insertion_point(field_get:proto.TransportCatalogue.buses_and_stops)
  return _internal_buses_and_stops();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_buses_and_stops(
    ::proto::BusesAndStops* buses_and_stops) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buses_and_stops_);
  }
  _impl_.buses_and_stops_ = buses_and_stops;
  if (buses_and_stops) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransportCatalogue.buses_and_stops)
}
inline ::proto::BusesAndStops* TransportCatalogue::release_buses_and_stops() {
  
  ::proto::BusesAndStops* temp = _impl_.buses_and_stops_;
  _impl_.buses_and_stops_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::BusesAndStops* TransportCatalogue::unsafe_arena_release_buses_and_stops() {
  // @@protoc_insertion_point(field_release:proto.TransportCatalogue.buses_and_stops)
  
  ::proto::BusesAndStops* temp = _impl_.buses_and_stops_;
  _impl_.buses_and_stops_ = nullptr;
  return temp;
}
inline ::proto::BusesAndStops* TransportCatalogue::_internal_mutable_buses_and_stops() {
  
  if (_impl_.buses_and_stops_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::BusesAndStops>(GetArenaForAllocation());
    _impl_.buses_and_stops_ = p;
  }
  return _impl_.buses_and_stops_;
}
inline ::proto::BusesAndStops* TransportCatalogue::mutable_buses_and_stops() {
  ::proto::BusesAndStops* _msg = _internal_mutable_buses_and_stops();
  // @@protoc_insertion_point(field_mutable:proto.TransportCatalogue.buses_and_stops)
  return _msg;
}
inline void TransportCatalogue::set_allocated_buses_and_stops(::proto::BusesAndStops* buses_and_stops) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.buses_and_stops_;
  }
  if (buses_and_stops) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(buses_and_stops);
    if (message_arena != submessage_arena) {
      buses_and_stops = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buses_and_stops, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buses_and_stops_ = buses_and_stops;
  // @@protoc_insertion_point(field_set_allocated:proto.TransportCatalogue.buses_and_stops)
}

// .proto.RenderSettings render_settings = 2;
inline bool TransportCatalogue::_internal_has_render_settings() const {
  return this != internal_default_instance() && _impl_.render_settings_ != nullptr;
}
inline bool TransportCatalogue::has_render_settings() const {
  return _internal_has_render_settings();
}
inline const ::proto::RenderSettings& TransportCatalogue::_internal_render_settings() const {
  const ::proto::RenderSettings* p = _impl_.render_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RenderSettings&>(
      ::proto::_RenderSettings_default_instance_);
}
inline const ::proto::RenderSettings& TransportCatalogue::render_settings() const {
  // @@protoc_insertion_point(field_get:proto.TransportCatalogue.render_settings)
  return _internal_render_settings();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_render_settings(
    ::proto::RenderSettings* render_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.render_settings_);
  }
  _impl_.render_settings_ = render_settings;
  if (render_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransportCatalogue.render_settings)
}
inline ::proto::RenderSettings* TransportCatalogue::release_render_settings() {
  
  ::proto::RenderSettings* temp = _impl_.render_settings_;
  _impl_.render_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RenderSettings* TransportCatalogue::unsafe_arena_release_render_settings() {
  // @@protoc_insertion_point(field_release:proto.TransportCatalogue.render_settings)
  
  ::proto::RenderSettings* temp = _impl_.render_settings_;
  _impl_.render_settings_ = nullptr;
  return temp;
}
inline ::proto::RenderSettings* TransportCatalogue::_internal_mutable_render_settings() {
  
  if (_impl_.render_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RenderSettings>(GetArenaForAllocation());
    _impl_.render_settings_ = p;
  }
  return _impl_.render_settings_;
}
inline ::proto::RenderSettings* TransportCatalogue::mutable_render_settings() {
  ::proto::RenderSettings* _msg = _internal_mutable_render_settings();
  // @@protoc_insertion_point(field_mutable:proto.TransportCatalogue.render_settings)
  return _msg;
}
inline void TransportCatalogue::set_allocated_render_settings(::proto::RenderSettings* render_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.render_settings_);
  }
  if (render_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(render_settings));
    if (message_arena != submessage_arena) {
      render_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, render_settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.render_settings_ = render_settings;
  // @@protoc_insertion_point(field_set_allocated:proto.TransportCatalogue.render_settings)
}

// .proto.RouterData router_data = 3;
inline bool TransportCatalogue::_internal_has_router_data() const {
  return this != internal_default_instance() && _impl_.router_data_ != nullptr;
}
inline bool TransportCatalogue::has_router_data() const {
  return _internal_has_router_data();
}
inline void TransportCatalogue::clear_router_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.router_data_ != nullptr) {
    delete _impl_.router_data_;
  }
  _impl_.router_data_ = nullptr;
}
inline const ::proto::RouterData& TransportCatalogue::_internal_router_data() const {
  const ::proto::RouterData* p = _impl_.router_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RouterData&>(
      ::proto::_RouterData_default_instance_);
}
inline const ::proto::RouterData& TransportCatalogue::router_data() const {
  // @@protoc_insertion_point(field_get:proto.TransportCatalogue.router_data)
  return _internal_router_data();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_router_data(
    ::proto::RouterData* router_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.router_data_);
  }
  _impl_.router_data_ = router_data;
  if (router_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransportCatalogue.router_data)
}
inline ::proto::RouterData* TransportCatalogue::release_router_data() {
  
  ::proto::RouterData* temp = _impl_.router_data_;
  _impl_.router_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RouterData* TransportCatalogue::unsafe_arena_release_router_data() {
  // @@protoc_insertion_point(field_release:proto.TransportCatalogue.router_data)
  
  ::proto::RouterData* temp = _impl_.router_data_;
  _impl_.router_data_ = nullptr;
  return temp;
}
inline ::proto::RouterData* TransportCatalogue::_internal_mutable_router_data() {
  
  if (_impl_.router_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RouterData>(GetArenaForAllocation());
    _impl_.router_data_ = p;
  }
  return _impl_.router_data_;
}
inline ::proto::RouterData* TransportCatalogue::mutable_router_data() {
  ::proto::RouterData* _msg = _internal_mutable_router_data();
  // @@protoc_insertion_point(field_mutable:proto.TransportCatalogue.router_data)
  return _msg;
}
inline void TransportCatalogue::set_allocated_router_data(::proto::RouterData* router_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.router_data_;
  }
  if (router_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(router_data);
    if (message_arena != submessage_arena) {
      router_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.router_data_ = router_data;
  // @@protoc_insertion_point(field_set_allocated:proto.TransportCatalogue.router_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
